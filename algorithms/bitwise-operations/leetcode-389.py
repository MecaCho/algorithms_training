'''
389. 找不同
给定两个字符串 s 和 t，它们只包含小写字母。

字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。

请找出在 t 中被添加的字母。



示例:

输入：
s = "abcd"
t = "abcde"

输出：
e

解释：
'e' 是那个被添加的字母。


389. Find the Difference
Given two strings s and t which consist of only lowercase letters.

String t is generated by random shuffling string s and then add one more letter at a random position.

Find the letter that was added in t.

Example:

Input:
s = "abcd"
t = "abcde"

Output:
e

Explanation:
'e' is the letter that was added.
'''


class Solution(object):
    def findTheDifference(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        # hash_map = collections.defaultdict(int)
        # for i in range(len(s)):
        #     hash_map[s[i]] += 1
        # for i in range(len(t)):
        #     hash_map[t[i]] -= 1
        # # print(hash_map)
        # for k , v in hash_map.items():
        #     if v == -1:
        #         return k

        new_s = s + t
        res = 0
        for i in range(len(new_s)):
            res ^= ord(new_s[i])
        return chr(res)

'''
类似与找字符串字符个数为奇数的字符

思路一：统计个数

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        from collections import Counter
        c1 = Counter(s)
        c2 = Counter(t)
        for i in range(ord("a"), ord("z") + 1):
            tmp = chr(i)
            if c2[tmp] - c1[tmp] == 1:
                return tmp
思路二：相减

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        return chr(sum(map(ord, t)) - sum(map(ord, s)))
思路三：异或

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        tmp = s + t
        res = ord(tmp[0])
        for t in tmp[1:]:
            res ^= ord(t)
        return chr(res)
一句：

from functools import reduce
import operator
class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        return chr(reduce(operator.xor, map(ord, s + t)))

'''